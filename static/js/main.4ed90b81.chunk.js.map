{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","time","setTime","timerOn","setTimeOn","useEffect","interval","setInterval","prevTime","clearInterval","className","Math","floor","slice","Button","color","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAuEeA,MAhEf,WAEE,MAAwBC,mBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA6BF,oBAAS,GAAtC,mBAAOG,EAAP,KAAgBC,EAAhB,KAiBA,OAfAC,qBAAU,WACR,IAAIC,EAAW,KAUf,OARGH,EACDG,EAAWC,aAAY,WACrBL,GAAQ,SAAAM,GAAQ,OAAIA,EAAW,QAC9B,IAEHC,cAAcH,GAGT,kBAAMG,cAAcH,MAE1B,CAACH,IAGF,sBAAKO,UAAU,MAAf,UACE,mCACE,kCAAQ,IAAMC,KAAKC,MAAOX,EAAO,IAAS,KAAKY,OAAO,GAAtD,OACA,kCAAQ,IAAMF,KAAKC,MAAOX,EAAO,IAAQ,KAAKY,OAAO,GAArD,OACA,gCAAQ,IAAQZ,EAAO,GAAM,KAAMY,OAAO,QAE5C,uBACA,iCACIV,GAAoB,IAATF,GACX,cAACa,EAAA,EAAD,CACEC,MAAM,UACNC,QAAS,kBACPZ,GAAU,IAHd,mBAODD,GACC,cAACW,EAAA,EAAD,CACEC,MAAM,UACNC,QAAS,kBACPZ,GAAU,IAHd,mBAOAD,GAAoB,IAATF,GACX,qCACE,cAACa,EAAA,EAAD,CACEC,MAAM,UACNC,QAAS,kBACPZ,GAAU,IAHd,oBAKA,cAACU,EAAA,EAAD,CACEC,MAAM,UACNC,QAAS,kBACPd,EAAQ,IAHZ,6BC/CGe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4ed90b81.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport './App.css';\nimport {\n  Button\n} from '@material-ui/core'\n\n\nfunction App() {\n\n  const [time, setTime] = useState(0)\n  const [timerOn, setTimeOn] = useState(false)\n\n  useEffect(() => {\n    let interval = null;\n\n    if(timerOn) {\n      interval = setInterval(() => {\n        setTime(prevTime => prevTime + 10)\n      }, 10)\n    } else {\n      clearInterval(interval)\n    }\n\n    return () => clearInterval(interval)\n\n  }, [timerOn])\n\n  return (\n    <div className=\"App\">\n      <strong>\n        <span>{(\"0\" + Math.floor((time / 60000) % 60)).slice(-2)}:</span>\n        <span>{(\"0\" + Math.floor((time / 1000) % 60)).slice(-2)}:</span>\n        <span>{(\"0\" + ((time / 10) % 100)).slice(-2)}</span>\n      </strong>\n      <br/>\n      <div>\n        {!timerOn && time === 0 && ( \n          <Button\n            color=\"primary\"\n            onClick={() =>\n              setTimeOn(true)\n            }>Start</Button>\n        )}\n\n        {timerOn && (\n          <Button\n            color=\"primary\"\n            onClick={() =>\n              setTimeOn(false)\n            }>Stop</Button>\n        )}\n\n        {!timerOn && time !== 0 && (\n          <>\n            <Button\n              color=\"primary\"\n              onClick={() =>\n                setTimeOn(true)\n              }>Resume</Button>\n            <Button\n              color=\"primary\"\n              onClick={() =>\n                setTime(0)\n              }>Reset</Button>\n          </>\n        )}\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}